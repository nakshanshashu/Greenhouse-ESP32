<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Smart GreenHouse Monitoring System</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <style>
    :root {
      --bg: #f3f9ff; --card: #ffffff; --accent: #2e7d32; --accent-600: #256628;
      --text: #0f172a; --muted: #6b7280; --border: #e5e7eb; --good: #059669; --bad: #dc2626;
      --primary-color: #4CAF50;
      --secondary-color: #2196F3;
      --danger-color: #f44336;
      --warning-color: #ff9800;
      --light-color: #f1f1f1;
      --dark-color: #333;
      --border-radius: 8px;
      --box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Segoe UI', sans-serif; }
    body {
      margin: 0;
      background: url("https://greendripgrow.com/wp-content/uploads/2024/05/building-a-budget-friendly-high-quality-hydroponic-setup-1024x585.png") no-repeat center center fixed;
      background-size: cover;
      color: var(--text);
    }
    .auth-container {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      padding: 20px;
      background: url("https://images.unsplash.com/photo-1517508731596-5f5e3b0d2897?q=80&w=2070&auto=format&fit=crop") no-repeat center center fixed;
      background-size: cover;
      background-color: rgba(0, 100, 0, 0.5); /* Dark green semi-transparent overlay for readability */
    }
    /* --- Auth Styles --- */
    .auth-card {
      background-color: white;
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      width: 100%; max-width: 400px; padding: 30px;
    }
    .auth-header { text-align: center; margin-bottom: 30px; }
    .auth-header h1 { color: var(--primary-color); margin-bottom: 10px; }
    .auth-header p { color: #666; }
    .auth-form .form-group { margin-bottom: 20px; }
    .auth-form label { display: block; margin-bottom: 8px; font-weight: 500; color: var(--dark-color); }
    .auth-form input {
      width: 100%; padding: 12px; border: 1px solid #ddd;
      border-radius: var(--border-radius); font-size: 16px; transition: border-color 0.3s;
    }
    .auth-form input:focus { border-color: var(--primary-color); outline: none; }
    .auth-form button {
      width: 100%; padding: 12px; background-color: var(--primary-color);
      color: white; border: none; border-radius: var(--border-radius);
      font-size: 16px; cursor: pointer; transition: background-color 0.3s; margin-top: 10px;
    }
    .auth-form button:hover { background-color: #388E3C; }
    .auth-links { margin-top: 20px; text-align: center; }
    .auth-links a { color: var(--secondary-color); text-decoration: none; margin: 0 10px; font-size: 14px; }
    .auth-links a:hover { text-decoration: underline; }
    .alert {
      padding: 10px; background-color: #f44336; color: white;
      margin-bottom: 15px; border-radius: var(--border-radius); display: none;
    }
    .alert.success { background-color: var(--primary-color); }
    .alert-closebtn { margin-left: 15px; color: white; font-weight: bold; float: right;
      font-size: 22px; line-height: 20px; cursor: pointer; transition: 0.3s; }
    .alert-closebtn:hover { color: black; }
    /* --- Dashboard Styles --- */
    header {
      display: flex; align-items: center; justify-content: space-between; padding: 16px 20px;
    }
    .brand { display: flex; align-items: center; gap: 10px; }
    .brand svg { width: 28px; height: 28px; color: var(--accent); }
    .brand h1 { margin: 0; font-size: 18px; color: var(--accent); }
    .user { display: flex; gap: 10px; align-items: center; color: var(--muted); font-size: 14px; }
    .btn {
      background: var(--accent); color: #fff; border: none;
      padding: 10px 14px; border-radius: 10px; font-weight: 600; cursor: pointer;
    }
    .btn:hover { background: var(--accent-600); }
    .btn.secondary { background: #0b6ef3; }
    .btn.secondary:hover { background: #0a5bd1; }
    .btn.ghost { background: transparent; color: var(--accent); border: 1px solid var(--accent); }
    main { max-width: 1100px; margin: 0 auto; padding: 14px 20px 28px; }
    .grid { display: grid; gap: 16px; }
    .cards-4 { grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); }
    .panel {
      background: var(--card); border: 1px solid var(--border);
      border-radius: 16px; padding: 16px; box-shadow: 0 8px 24px rgba(0, 0, 0, .05);
    }
    .panel h2 { margin: 0 0 12px 0; font-size: 16px; color: #374151; }
    .sensor { display: flex; align-items: baseline; gap: 8px; }
    .sensor .value { font-size: 28px; font-weight: 700; }
    .sensor .unit { color: var(--muted); }
    .controls { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 12px; }
    .toggle { display: flex; align-items: center; justify-content: space-between; padding: 12px; border: 1px solid var(--border); border-radius: 12px; }
    .switch { position: relative; width: 48px; height: 28px; }
    .switch input { opacity: 0; width: 0; height: 0; }
    .slider {
      position: absolute; cursor: pointer; inset: 0; background: #e5e7eb; transition: .2s; border-radius: 999px;
    }
    .slider:before {
      content: ""; position: absolute; height: 22px; width: 22px; left: 3px; top: 3px;
      background: #fff; transition: .2s; border-radius: 999px; box-shadow: 0 1px 3px rgba(0,0,0,.2);
    }
    .switch input:checked + .slider { background: var(--accent); }
    .switch input:checked + .slider:before { transform: translateX(20px); }
    .row { display: flex; gap: 10px; flex-wrap: wrap; }
    .muted { color: var(--muted); }
    .status { display: flex; gap: 12px; align-items: center; font-size: 13px; }
    .dot { width: 8px; height: 8px; border-radius: 999px; display: inline-block; }
    .dot.on { background: var(--good); }
    .dot.off { background: var(--bad); }
    footer { padding: 14px 20px; text-align: center; color: var(--muted); font-size: 12px; }
    .warn { color: #b45309; }
  </style>
</head>
<body>
  <div id="loginForm" class="auth-container">
    <div class="auth-card">
      <div class="auth-header">
        <h1><i class="fas fa-leaf"></i> Smart GreenHouse Project </h1>
        <p>Login to access your dashboard</p>
      </div>
      <div id="loginAlert" class="alert">
        <span class="alert-closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
        <span id="loginAlertMessage"></span>
      </div>
      <form class="auth-form" id="login-form">
        <div class="form-group">
          <label for="login-email">Email</label>
          <input type="email" id="login-email" placeholder="Enter your email" required>
        </div>
        <div class="form-group">
          <label for="login-password">Password</label>
          <input type="password" id="login-password" placeholder="Enter your password" required>
        </div>
        <button type="submit">Login</button>
        <div class="auth-links">
          <a href="#" id="to-register">Create an account</a>
          <a href="#" id="to-reset">Forgot password?</a>
        </div>
      </form>
    </div>
  </div>
  <div id="registerForm" class="auth-container" style="display: none;">
    <div class="auth-card">
      <div class="auth-header">
        <h1><i class="fas fa-leaf"></i> Smart GreenHouse Project</h1>
        <p>Create a new account</p>
      </div>
      <div id="registerAlert" class="alert">
        <span class="alert-closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
        <span id="registerAlertMessage"></span>
      </div>
      <form class="auth-form" id="register-form">
        <div class="form-group">
          <label for="register-name">Name</label>
          <input type="text" id="register-name" placeholder="Enter your name" required>
        </div>
        <div class="form-group">
          <label for="register-email">Email</label>
          <input type="email" id="register-email" placeholder="Enter your email" required>
        </div>
        <div class="form-group">
          <label for="register-password">Password</label>
          <input type="password" id="register-password" placeholder="Enter your password" required>
        </div>
        <div class="form-group">
          <label for="register-confirm-password">Confirm Password</label>
          <input type="password" id="register-confirm-password" placeholder="Confirm your password" required>
        </div>
        <button type="submit">Register</button>
        <div class="auth-links">
          <a href="#" id="to-login-from-register">Already have an account?</a>
        </div>
      </form>
    </div>
  </div>
  <div id="resetForm" class="auth-container" style="display: none;">
    <div class="auth-card">
      <div class="auth-header">
        <h1><i class="fas fa-leaf"></i> Smart GreenHouse Project</h1>
        <p>Reset your password</p>
      </div>
      <div id="resetAlert" class="alert">
        <span class="alert-closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
        <span id="resetAlertMessage"></span>
      </div>
      <form class="auth-form" id="reset-form">
        <div class="form-group">
          <label for="reset-email">Email</label>
          <input type="email" id="reset-email" placeholder="Enter your email" required>
        </div>
        <button type="submit">Reset Password</button>
        <div class="auth-links">
          <a href="#" id="to-login-from-reset">Back to login</a>
        </div>
      </form>
    </div>
  </div>
  <div id="dashboard" style="display:none">
    <header>
      <div class="brand">
        <svg viewBox="0 0 24 24" fill="none" aria-hidden="true">
          <path d="M4 13c5-9 13-9 16-8" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
          <path d="M4 13c5-9 13-9 16-8 1 .2 2 1.2 2 2.2C21 13 15 20 8.2 20 5.3 20 4 18 4 16v-3z" fill="currentColor" opacity=".14"/>
        </svg>
        <h1 style="width:100%; text-align:center;">Smart GreenHouse Project</h1>
      </div>
      <div class="user">
        <span id="user-email">...</span>
        <button id="logout" class="btn ghost">Logout</button>
      </div>
    </header>
    <main>
      <section class="grid cards-4">
        <div class="panel"><h2>Temperature</h2><div class="sensor"><span id="temp" class="value">--</span><span class="unit">°C</span></div></div>
        <div class="panel"><h2>Humidity</h2><div class="sensor"><span id="hum" class="value">--</span><span class="unit">%</span></div></div>
        <div class="panel"><h2>Sunlight</h2><div class="sensor"><span id="sun" class="value">--</span><span class="unit">lx</span></div></div>
        <div class="panel"><h2>Moisture</h2><div class="sensor"><span id="moist" class="value">--</span><span class="unit">%</span></div></div>
      </section>
      <section class="panel" style="margin-top:16px">
        <h2>Controls</h2>
        <p id="auto-note" class="muted" style="margin-top:-6px">Manual controls are disabled while Auto mode is on.</p>
        <div class="controls" style="margin-top:8px">
          <div class="toggle"><label for="fan">Fan</label><label class="switch"><input type="checkbox" id="fan"><span class="slider"></span></label></div>
          <div class="toggle"><label for="light">Light</label><label class="switch"><input type="checkbox" id="light"><span class="slider"></span></label></div>
          <div class="toggle"><label for="pump">Pump</label><label class="switch"><input type="checkbox" id="pump"><span class="slider"></span></label></div>
          <div class="toggle"><label for="door">Door</label><label class="switch"><input type="checkbox" id="door"><span class="slider"></span></label></div>
        </div>
        <div class="row" style="margin-top:12px">
          <label class="toggle" style="border:none; padding:0">
            <span style="font-weight:600; margin-right:8px">Automatic mode</span>
            <label class="switch"><input type="checkbox" id="auto"><span class="slider"></span></label>
          </label>
          <button id="refresh" class="btn secondary" title="Fetch latest values from the cloud">Refresh</button>
        </div>
        <div class="row" style="margin-top:10px; justify-content:space-between">
          <div class="status"><span id="conn-dot" class="dot off"></span><span id="conn-text">Offline</span></div>
          <div class="status"><span class="muted">Last sensor update:</span><span id="last-update">—</span></div>
        </div>
        <p id="warn" class="warn" style="display:none; margin-top:10px">You don’t have permission to change some fields (rules blocked).</p>
      </section>
    </main>
    <footer>2025 Smart Greenhouse Dashboard</footer>
  </div>
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
    import { getAuth, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, signOut } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js";
    import { getDatabase, ref, onValue, get, update, serverTimestamp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-database.js";
    // Firebase configuration
    const firebaseConfig = {
  apiKey: "AIzaSyD18rMmX3Sk8OcUmC0ythChmDzhiXQs0wk",
  authDomain: "green-house-esp32.firebaseapp.com",
  databaseURL: "https://green-house-esp32-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "green-house-esp32",
  storageBucket: "green-house-esp32.firebasestorage.app",
  messagingSenderId: "988005755657",
  appId: "1:988005755657:web:065d3d0b08b955bdf681d8"
};

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getDatabase(app);
    // UI elements
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    const resetForm = document.getElementById('resetForm');
    const dashboard = document.getElementById('dashboard');
    // Auth navigation
    document.getElementById('to-register').addEventListener('click', (e) => {
      e.preventDefault(); loginForm.style.display = 'none'; registerForm.style.display = 'flex';
    });
    document.getElementById('to-login-from-register').addEventListener('click', (e) => {
      e.preventDefault(); registerForm.style.display = 'none'; loginForm.style.display = 'flex';
    });
    document.getElementById('to-reset').addEventListener('click', (e) => {
      e.preventDefault(); loginForm.style.display = 'none'; resetForm.style.display = 'flex';
    });
    document.getElementById('to-login-from-reset').addEventListener('click', (e) => {
      e.preventDefault(); resetForm.style.display = 'none'; loginForm.style.display = 'flex';
    });
    // Alerts
    function showAlert(alertId, message, isSuccess=false) {
      const alert = document.getElementById(alertId);
      const alertMessage = document.getElementById(alertId + 'Message');
      alertMessage.textContent = message;
      alert.style.display = 'block';
      if (isSuccess) { alert.classList.add('success'); }
      else { alert.classList.remove('success'); }
    }
    // Auth flows
    document.getElementById('login-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const email = document.getElementById('login-email').value;
      const password = document.getElementById('login-password').value;
      try {
        await signInWithEmailAndPassword(auth, email, password);
      } catch (err) { showAlert('loginAlert', err.message); }
    });
    document.getElementById('register-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const name = document.getElementById('register-name').value;
      const email = document.getElementById('register-email').value;
      const password = document.getElementById('register-password').value;
      const confirmPassword = document.getElementById('register-confirm-password').value;
      if (password !== confirmPassword) {
        showAlert('registerAlert', 'Passwords do not match'); return;
      }
      try {
        await createUserWithEmailAndPassword(auth, email, password);
        showAlert('registerAlert', 'Registration successful! You can now login.', true);
        setTimeout(() => { registerForm.style.display = 'none'; loginForm.style.display = 'flex'; }, 2000);
      } catch (err) { showAlert('registerAlert', err.message); }
    });
    document.getElementById('reset-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const email = document.getElementById('reset-email').value;
      try {
        await sendPasswordResetEmail(auth, email);
        showAlert('resetAlert', 'Password reset email sent. Check your inbox.', true);
        setTimeout(() => { resetForm.style.display = 'none'; loginForm.style.display = 'flex'; }, 3000);
      } catch (err) { showAlert('resetAlert', err.message); }
    });
    document.getElementById('logout').addEventListener('click', async () => {
      try { await signOut(auth); } catch (e) {}
    });
    // Dashboard Firebase listeners
    const sensorsRef = ref(db, 'sensors');
    const controlsRef = ref(db, 'controls');
    const settingsRef = ref(db, 'settings');
    const $temp = document.getElementById('temp');
    const $hum = document.getElementById('hum');
    const $sun = document.getElementById('sun');
    const $moist = document.getElementById('moist');
    const $fan = document.getElementById('fan');
    const $light = document.getElementById('light');
    const $pump = document.getElementById('pump');
    const $door = document.getElementById('door');
    const $auto = document.getElementById('auto');
    const $note = document.getElementById('auto-note');
    const $lastUpdate = document.getElementById('last-update');
    const $warn = document.getElementById('warn');
    const $connDot = document.getElementById('conn-dot');
    const $connText = document.getElementById('conn-text');
    onValue(ref(db, '.info/connected'), (snap) => {
      const online = !!snap.val();
      $connDot.className = 'dot ' + (online ? 'on' : 'off');
      $connText.textContent = online ? 'Online' : 'Offline';
    });
    const fmt = (ms) => {
      if (!ms) return '—';
      const date = new Date(ms);
      return date.toLocaleString(undefined, { year: 'numeric', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' });
    };
    function lockManual(disabled) {
      [$fan, $light, $pump, $door].forEach(i => i.disabled = !!disabled);
      $note.style.display = disabled ? 'block' : 'none';
    }
    function attachRealtime(user) {
      onValue(sensorsRef, (snap) => {
        const s = snap.val() || {};
        $temp.textContent = s.temperature ?? '--';
        $hum.textContent = s.humidity ?? '--';
        $sun.textContent = s.sunlight ?? '--';
        $moist.textContent = s.moisture ?? '--';
        $lastUpdate.textContent = fmt(s.updatedAt);
      });
      onValue(controlsRef, (snap) => {
        const c = snap.val() || {};
        $fan.checked = !!c.fan;
        $light.checked = !!c.light;
        $pump.checked = !!c.pump;
        $door.checked = !!c.door;
      });
      onValue(settingsRef, (snap) => {
        const st = snap.val() || {};
        $auto.checked = !!st.autoMode;
        lockManual(!!st.autoMode);
      });
      async function writeControl(key, val) {
        try {
          $warn.style.display = 'none';
          await update(controlsRef, { [key]: !!val, updatedAt: serverTimestamp(), updatedBy: user.uid });
        } catch (e) {
          $warn.style.display = 'block';
        }
      }
      $fan.addEventListener('change', (e) => writeControl('fan', e.target.checked));
      $light.addEventListener('change', (e) => writeControl('light', e.target.checked));
      $pump.addEventListener('change', (e) => writeControl('pump', e.target.checked));
      $door.addEventListener('change', (e) => writeControl('door', e.target.checked));
      $auto.addEventListener('change', async (e) => {
        try {
          $warn.style.display = 'none';
          lockManual(e.target.checked);
          await update(settingsRef, { autoMode: !!e.target.checked, updatedAt: serverTimestamp() });
        } catch (e) {
          $warn.style.display = 'block';
          $auto.checked = !$auto.checked;
          lockManual($auto.checked);
        }
      });
      document.getElementById('refresh').addEventListener('click', async () => {
        const [s1, s2, s3] = await Promise.all([get(sensorsRef), get(controlsRef), get(settingsRef)]);
        const s = s1.val() || {}, c = s2.val() || {}, st = s3.val() || {};
        $temp.textContent = s.temperature ?? '--';
        $hum.textContent = s.humidity ?? '--';
        $sun.textContent = s.sunlight ?? '--';
        $moist.textContent = s.moisture ?? '--';
        $lastUpdate.textContent = fmt(s.updatedAt);
        $fan.checked = !!c.fan;
        $light.checked = !!c.light;
        $pump.checked = !!c.pump;
        $door.checked = !!c.door;
        $auto.checked = !!st.autoMode;
        lockManual(!!st.autoMode);
      });
    }
    // Auth state
    onAuthStateChanged(auth, (user) => {
      if (user) {
        document.getElementById('user-email').textContent = user.email || 'Signed in';
        loginForm.style.display = 'none';
        registerForm.style.display = 'none';
        resetForm.style.display = 'none';
        dashboard.style.display = 'block';
        attachRealtime(user);
      } else {
        dashboard.style.display = 'none';
        loginForm.style.display = 'flex';
      }
    });
  </script>
</body>
</html>
